import os
import argparse

PROJ_NAME = "bitty_hackaton" # If changed make sure to change PROJ_NAME in TCL scripts as well.

# Change path if necessary.
QUARTUS_SH_EXE = "C:/intelFPGA_lite/23.1std/quartus/bin64/quartus_sh.exe -t " 
QUARTUS_GUI_EXE = "C:/intelFPGA_lite/23.1std/quartus/bin64/quartus.exe "

# Help messages.
HELP_MSG_SCRIPT_DESCRIPTION = "This is a utility script that automates project creation and compilation in Quartus."
HELP_MSG_NEW_PROJ = "Create a new project using files in ./rtl directory."
HELP_MSG_OPEN_GUI = "Open your project in Quartus GUI."
HELP_MSG_RUN_SYNT = "Run synthesis and implementation."
HELP_MSG_METRICS = "Print performance metric results. First need to compile the design using -r flag."
HELP_MSG_CLEAN = "Clean work directory by deleting all files generated by Quartus & scripts."

# Scripts.
PROJ_TCL = './scripts/proj.tcl'
SYNT_TCL = './scripts/synt.tcl'
METR_PY = './scripts/metr_collection.py'



def create_project():
    print("Creating the project in Quartus...")
    os.system(QUARTUS_SH_EXE + PROJ_TCL)
    print("Successfully created the project in Quartus")
    print("Project can be found at ./tmp/" + PROJ_NAME + " or can be opened using -o agrument in run.py script")


def open_project():
    print("Opening the project in Quartus GUI...")
    os.system(QUARTUS_GUI_EXE + " ./tmp/" + PROJ_NAME + "/" + PROJ_NAME + ".qpf")
    print("Closing the project...")

def run_synthesis():
    print("Compiling the design...")
    os.system(QUARTUS_SH_EXE + SYNT_TCL)
    print("Successfully compiled the design.")
    print("You can see performance metrics by running: python run.py -m")


def gen_metrics():
    os.system("python " + METR_PY)

def clean_simulation():
    print("Cleaning...")
    os.system("rmdir /s /q tmp")
    os.system("del /f /q result.txt")



def parse_arguments():
    parser = argparse.ArgumentParser(description=HELP_MSG_SCRIPT_DESCRIPTION)
    parser.add_argument('-n', '--new_project', action='store_true', default=False, help=HELP_MSG_NEW_PROJ)
    parser.add_argument('-o', '--open_project', action='store_true', default=False, help=HELP_MSG_OPEN_GUI)
    parser.add_argument('-r', '--run_synthesis', action='store_true', default=False, help=HELP_MSG_RUN_SYNT)
    parser.add_argument('-m', '--metrics', action='store_true', default=False, help=HELP_MSG_METRICS)
    parser.add_argument('-c', '--clean', action='store_true', default=False, help=HELP_MSG_CLEAN)

    return parser.parse_args(), parser.format_help()

def main():
    args, help_msg = parse_arguments()

    if hasattr(args, 'help') and args.help:
        print(help_msg)
    elif args.clean:
        clean_simulation()
    elif args.metrics:
        gen_metrics()
    elif args.run_synthesis:
        run_synthesis()
    elif args.new_project:
        create_project()
    elif args.open_project:
        open_project()
    else:
        print(help_msg)

main()
